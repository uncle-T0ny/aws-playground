version: 0.2
env:
  variables:
    SLACK_CHANNEL_ID: C082CSTJ2J2
    SLACK_BOT_TOKEN: xoxb-214407968934-8110370703840-PVbwKXDu36PNnCGijkR9z3PE
phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - npm install
      - apt-get update && apt-get install -y jq
  build:
    commands:
      - echo "Running integration tests..."
      - |
        # Run tests and capture output and exit status
        npm test > test_output.txt 2>&1
        echo $? > test_exit_code.txt
  post_build:
    commands:
      # Read the exit status and test output from files
      - test_exit_code=$(cat test_exit_code.txt)
      - |
        # Function to upload a file to Slack
        upload_file_to_slack() {
          local file_path="$1"
          local file_name="$2"
          local channel_id="$3"
  
          echo "Starting file upload process..."
  
          if [ ! -f "$file_path" ]; then
            echo "Error: File $file_path does not exist"
            return 1
          fi
  
          file_length=$(wc -c < "$file_path" | tr -d '[:space:]')
  
          # Step 1: Get upload URL and file ID
          echo "Getting upload URL..."
          response=$(curl -s -X GET -G \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            --data-urlencode "filename=$file_name" \
            --data-urlencode "length=$file_length" \
            https://slack.com/api/files.getUploadURLExternal)
  
          echo "API Response: $response"
  
          upload_url=$(echo "$response" | jq -r '.upload_url')
          file_id=$(echo "$response" | jq -r '.file_id')
  
          echo "Upload URL: $upload_url"
          echo "File ID: $file_id"
  
          if [ "$upload_url" = "null" ] || [ "$file_id" = "null" ]; then
            echo "Failed to get upload URL: $response"
            return 1
          fi
  
          echo "Uploading $file_path to Slack..."
  
          # Step 2: Upload the file
          upload_response=$(curl -s -X POST --data-binary @"$file_path" \
            -H "Content-Type: application/octet-stream" \
            "$upload_url")
  
          echo "Upload response: $upload_response"
  
          # Step 3: Complete the upload
          complete_response=$(curl -s -X POST "https://slack.com/api/files.completeUploadExternal" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/json; charset=utf-8" \
            -d "{
            \"files\": [{\"id\": \"$file_id\", \"title\": \"$file_name\"}],
            \"channel_id\": \"$channel_id\",
            \"initial_comment\": \"Here are the test results:\"
          }")
  
          echo "Complete upload response: $complete_response"
  
          if echo "$complete_response" | jq -e '.ok' > /dev/null; then
            echo "File upload completed successfully"
            return 0
          else
            echo "File upload failed"
            return 1
          fi
        }
      - |
        if [ "$test_exit_code" -eq 0 ]; then
          # Notify Slack of success
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"text": "âœ… *Build Succeeded*: The integration tests passed successfully."}' \
            "$SLACK_WEBHOOK_URL"
        else
          # Notify Slack of failure and upload test output
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"text": "ðŸš« *Build Failed*: Uploading test results file..."}' \
            "$SLACK_WEBHOOK_URL"
        
          upload_file_to_slack "test_output.txt" "test_output.txt" "$SLACK_CHANNEL_ID"
        fi
artifacts:
  files:
    - test_output.txt