version: 0.2
env:
  variables:
    SLACK_CHANNEL_ID: C082CSTJ2J2
phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - npm install
  build:
    commands:
      - echo "Running integration tests..."
      - |
        # Run tests and capture output and exit status
        npm test > test_output.txt 2>&1
        echo $? > test_exit_code.txt
  post_build:
    commands:
      - |
        # Read the exit status and test output from files
        test_exit_code=$(cat test_exit_code.txt)

        # Function to escape JSON strings
        escape_json() {
          echo "$1" | python -c 'import json,sys; print(json.dumps(sys.stdin.read()))'
        }

        # Upload file to Slack
        upload_file_to_slack() {
          local file_path="$1"
          local file_name="$2"
          local channel_id="$3"

          # Step 1: Get upload URL and file ID
          response=$(curl -s -X GET -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            "https://slack.com/api/files.getUploadURLExternal?filename=$file_name&length=$(wc -c <"$file_path")")
          upload_url=$(echo "$response" | jq -r '.upload_url')
          file_id=$(echo "$response" | jq -r '.file_id')

          if [ "$upload_url" = "null" ] || [ "$file_id" = "null" ]; then
            echo "Failed to get upload URL: $response"
            return 1
          fi

          # Step 2: Upload the file
          curl -s -X POST --data-binary @"$file_path" \
            -H "Content-Type: application/octet-stream" \
            "$upload_url"

          # Step 3: Complete the upload
          curl -s -X POST "https://slack.com/api/files.completeUploadExternal" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/json; charset=utf-8" \
            -d "{
              \"files\": [{\"id\": \"$file_id\", \"title\": \"$file_name\"}],
              \"channel_id\": \"$channel_id\",
              \"initial_comment\": \"Here are the test results:\"
            }"
        }

        if [ "$test_exit_code" -eq 0 ]; then
          # Notify Slack of success
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"âœ… *Build Succeeded*: The integration tests passed successfully.\"}" "$SLACK_WEBHOOK_URL"
        else
          # Notify Slack of failure and upload test output
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"ðŸš« *Build Failed*: Uploading test results file...\"}" "$SLACK_WEBHOOK_URL"
          upload_file_to_slack "test_output.txt" "test_output.txt" "$SLACK_CHANNEL_ID"
        fi
artifacts:
  files:
    - "test_output.txt"