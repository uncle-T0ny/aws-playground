version: 0.2
env:
  variables:
    SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - npm install
  build:
    commands:
      - echo "Running integration tests..."
      - |
        # Run tests and capture output and exit status
        npm test > test_output.txt 2>&1
        echo $? > test_exit_code.txt
  post_build:
    commands:
      - |
        # Read the exit status and test output
        test_exit_code=$(cat test_exit_code.txt)
        test_output=$(cat test_output.txt)

        # Function to escape JSON special characters
        escape_json() {
          echo "$1" | python -c 'import json,sys; print(json.dumps(sys.stdin.read()))'
        }

        send_slack_notification() {
          local status="$1"
          local message
          if [ "$status" = "SUCCESS" ]; then
            message="âœ… *Build Succeeded*: The integration tests passed successfully."
          else
            # Limit output to last 50 lines to avoid exceeding Slack message limits
            test_output_tail=$(tail -n 50 test_output.txt)
            escaped_output=$(escape_json "$test_output_tail")
            message="ðŸš« *Build Failed*: The integration tests failed.\n\`\`\`$test_output_tail\`\`\`"
          fi
          echo "Sending Slack notification..."
          # Escape the message for JSON
          escaped_message=$(echo -e "$message" | python -c 'import json,sys; print(json.dumps(sys.stdin.read()))')
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": $escaped_message}" "$SLACK_WEBHOOK_URL"
        }

        if [ "$test_exit_code" -eq 0 ]; then
          send_slack_notification "SUCCESS"
        else
          send_slack_notification "FAILED"
        fi
artifacts:
  files:
    - "**/*"