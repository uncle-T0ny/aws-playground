AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Lambda with API Gateway and CodePipeline using CloudFormation

Parameters:
  S3Bucket:
    Type: AWS::SSM::Parameter::Value<String>
    Description: S3 Bucket for Lambda code
    Default: /lambda-s3-bucket
  S3Key:
    Type: AWS::SSM::Parameter::Value<String>
    Description: S3 Key for Lambda code
    Default: /lambda-s3-key

Resources:
  UnifiedExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - codebuild.amazonaws.com
                - codepipeline.amazonaws.com
                - cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: UnifiedExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:*
                  - codebuild:*
                  - cloudformation:*
                  - lambda:*
                  - s3:*
                  - logs:*
                  - apigateway:*
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - sns:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:*
                  - sns:*
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GitHubTokenForCodePipeline*"


  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyLambdaFunction
      Handler: index.handler
      Role: !GetAtt UnifiedExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyApi

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: hello-test-v8
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations

  ApiGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod
      - ApiGatewayOptionsMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: dev

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*

  MyCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: MyCodeBuildProject
      Source:
        Type: CODEPIPELINE
        BuildSpec: ".buildspecs/deploy-lambdas.yaml"
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt UnifiedExecutionRole.Arn

  DeployApiGatewayBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: DeployApiGatewayBuildProject
      Source:
        Type: CODEPIPELINE
        BuildSpec: ".buildspecs/deploy-api-gateway.yaml"
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt UnifiedExecutionRole.Arn

  TestBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: TestBuildProject
      Source:
        Type: CODEPIPELINE
        BuildSpec: ".buildspecs/run-tests.yaml"
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt UnifiedExecutionRole.Arn

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: MyPipeline
      RoleArn: !GetAtt UnifiedExecutionRole.Arn
      ArtifactStore:
        Type: S3
        Location: rant-aws-sample
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: uncle-T0ny
                Repo: aws-playground
                Branch: main
                OAuthToken: "{{resolve:secretsmanager:GitHubTokenForCodePipeline:SecretString:oauthToken}}"
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: MyCodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: rant-lambda-stack
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: BuildArtifact::templates/main-template.yaml
                RoleArn: !GetAtt UnifiedExecutionRole.Arn
              RunOrder: 1
        - Name: DeployApiGateway
          Actions:
              - Name: DeployApiGatewayAction
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: '1'
                InputArtifacts:
                  - Name: BuildArtifact
                Configuration:
                  ProjectName: DeployApiGatewayBuildProject
                RunOrder: 1
        - Name: Test
          Actions:
            - Name: TestAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: TestBuildProject
              RunOrder: 1
      RestartExecutionOnUpdate: true

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/hello-test-v8"